/* Problem 29: Distinct powers
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/
package main

import (
	"fmt"
	"math"
)

type power struct {
	base, exponent int
}

func main() {
	const LIMIT = 100
	var duplicates = make(map[power]struct{})

	for a := 2; a <= LIMIT; a++ {
		for b := 2; b <= LIMIT; b++ {
			addDuplicates(duplicates, LIMIT, a, b)
		}
	}

	count := (LIMIT-1)*(LIMIT-1) - len(duplicates)

	fmt.Printf("There are %d distinct terms\n", count)
}

func pow(n1, n2 int) float64 {
	return math.Pow(float64(n1), float64(n2))
}

func addDuplicates(duplicates map[power]struct{}, limit, base, exp int) {
	if pow(base, exp) > float64(limit) {
		return
	}

	for secondExp := 2; secondExp <= limit; secondExp++ {
		expProduct := exp * secondExp

		for dupExp := secondExp + 1; dupExp <= limit; dupExp++ {
			if expProduct%dupExp == 0 {
				tempExp := expProduct / dupExp
				dupBase := int(pow(base, tempExp))
				duplicates[power{dupBase, dupExp}] = struct{}{}
			}
		}
	}
}
